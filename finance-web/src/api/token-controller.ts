/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { useMutation } from 'react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from 'react-query';
import type { CreateTokenRequest, CreateTokenResponse } from './model';

export const createAccessToken = (
  createTokenRequest: CreateTokenRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CreateTokenResponse>> => {
  return axios.default.post(
    `http://localhost:8080/api/auth/token`,
    createTokenRequest,
    options
  );
};

export const getCreateAccessTokenMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAccessToken>>,
    TError,
    { data: CreateTokenRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAccessToken>>,
  TError,
  { data: CreateTokenRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAccessToken>>,
    { data: CreateTokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createAccessToken(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateAccessTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAccessToken>>
>;
export type CreateAccessTokenMutationBody = CreateTokenRequest;
export type CreateAccessTokenMutationError = AxiosError<unknown>;

export const useCreateAccessToken = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAccessToken>>,
    TError,
    { data: CreateTokenRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof createAccessToken>>,
  TError,
  { data: CreateTokenRequest },
  TContext
> => {
  const mutationOptions = getCreateAccessTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
export const refreshAccessToken = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CreateTokenResponse>> => {
  return axios.default.post(
    `http://localhost:8080/api/auth/refresh-token`,
    undefined,
    options
  );
};

export const getRefreshAccessTokenMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshAccessToken>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refreshAccessToken>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshAccessToken>>,
    void
  > = () => {
    return refreshAccessToken(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RefreshAccessTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof refreshAccessToken>>
>;

export type RefreshAccessTokenMutationError = AxiosError<unknown>;

export const useRefreshAccessToken = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshAccessToken>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof refreshAccessToken>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getRefreshAccessTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
